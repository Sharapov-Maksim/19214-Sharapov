data Complex c = ToComplex c c

instance (Eq a, Ord a, Show a, Num a) => Show (Complex a) where
    show (ToComplex re 0) = show re
    show (ToComplex 0 im) | im == 1  = "i"
                          | im == -1 = "-i"
                          | im < 0   = show im ++ "i" 
                          | im > 0   = show im ++ "i"
    show (ToComplex re im) | im == 1  = show re ++ "+i"
                           | im == -1 = show re ++ "-i"
                           | im < 0   = show re ++ show im ++ "i"
                           | im > 0   = show re ++ "+" ++ show im ++ "i"

instance (Eq a, Ord a, Show a, Num a) => Eq (Complex a) where
    (==) (ToComplex re1 im1) (ToComplex re2 im2) = if (re1 == re2) && (im1 == im2) then True else False

instance (Eq a, Ord a, Show a, Num a) => Ord (Complex a) where
    compare (ToComplex re1 im1) (ToComplex re2 im2) = error "Can't to compare complex number"

instance (Eq a, Ord a, Show a, Num a) => Num (Complex a) where
    (+) (ToComplex re1 im1) (ToComplex re2 im2) = ToComplex (re1+re2) (im1+im2)
    (-) (ToComplex re1 im1) (ToComplex re2 im2) = ToComplex (re1-re2) (im1-im2)
    (*) (ToComplex re1 im1) (ToComplex re2 im2) = ToComplex (re1*re2 - im1*im2) (im1*re2 + re1*im2)
    abs (ToComplex re im) = ToComplex (abs re) (abs im)
    signum (ToComplex re _) = ToComplex (signum re) 0
    fromInteger x = ToComplex 0 0
    negate (ToComplex re im) = ToComplex re (-im)


data QuantumState a = ToQuantumState a String


instance (Eq a, Ord a, Show a, Num a) => Show (QuantumState a) where
    show (ToQuantumState c str) = show c ++ " with state: " ++ str

instance (Eq a, Ord a, Show a, Num a) => Eq (QuantumState a) where
    (==) (ToQuantumState c1 str1) (ToQuantumState c2 str2) = if c1 == c2 then True else False

instance Functor QuantumState where
    fmap f (ToQuantumState c str) = ToQuantumState (f c) str

type Qubit a = [QuantumState a]

toList::Qubit (Complex a) -> [Complex a]
toList [(ToQuantumState comp _)] = [comp]
toList ((ToQuantumState comp _):xs) = comp : toList xs 


toLabelList::Qubit (Complex a) -> [String]
toLabelList [(ToQuantumState _ str)] = [str]
toLabelList ((ToQuantumState _ str):xs) = str : toLabelList xs 


fromList:: [Complex a]->[String]->Qubit (Complex a)
fromList [comp] [str] = [(ToQuantumState comp str)]
fromList (comp:xs) (str:ys) = (ToQuantumState comp str) : fromList xs ys


toPairList:: Qubit (Complex a)->[(Complex a,String)]
toPairList [(ToQuantumState comp str)] = [(comp, str)]
toPairList ((ToQuantumState comp str):xs) = (comp, str) : toPairList xs 


fromPairList:: [(Complex a,String)] -> Qubit (Complex a)
fromPairList [(comp,str)] = [ToQuantumState comp str] 
fromPairList ((comp,str):xs) = ToQuantumState comp str : fromPairList xs 

-- I don`t realy shure how to calculate it
scalarProduct:: (Num a) => Qubit a ->Qubit a ->a
scalarProduct [] [] = 0
scalarProduct ((ToQuantumState comp1 _):qub1) ((ToQuantumState comp2 _):qub2) = (*) comp1 (negate(comp2)) + scalarProduct qub1 qub2


entagle::(Num a) => Qubit a ->Qubit a ->Qubit a
entagle [(ToQuantumState comp1 str1)] [(ToQuantumState comp2 str2)] = [ToQuantumState ((*) comp1 comp2) (str1 ++ str2)]
entagle ((ToQuantumState comp1 str1):qub1) ((ToQuantumState comp2 str2):qub2) = [ToQuantumState ((*) comp1 comp2) (str1 ++ str2)] ++ entagle qub1 qub2


